using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using System.Text;
using static System.Net.WebRequestMethods;

namespace MyResourceGenerator;

[Generator]
public class TheGenerator : IIncrementalGenerator
{
    private object files;



    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // the plan is SİMPLE bois
        // get every folder & file under resources
        // each folder is a class
        // each file is a property
        //System.Diagnostics.Debugger.Launch();

        IncrementalValuesProvider<(string, string)> file = context.AdditionalTextsProvider
               .Where(s => s.Path.Contains("Resources.json"))
               .Select((a, c) => (Path.GetFileNameWithoutExtension(a.Path), a.GetText(c)?.ToString()));

        IncrementalValueProvider<(Compilation Left, ImmutableArray<(string, string)> Right)> compilationAndFiles = context.CompilationProvider.Combine(file.Collect());

        context.RegisterSourceOutput(compilationAndFiles, Generate);


        var theCode = """

            namespace ClassListGenerator;

            public static class ClassNames
            {
                public static List<string> ClassNamesList = new List<string>
                {
                    "SomeClass"    
                };

            }
            """;

        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
    "EnumExtensionsAttribute.g.cs",
    theCode));
    }


    void Generate(SourceProductionContext context, (Compilation compilation, ImmutableArray<(string, string)> files) compilationAndFiles)
    {
        var (compilation, files) = compilationAndFiles;
        //System.Diagnostics.Debugger.Launch();
        // get the resources.json file
        // deserialize it
        // create a class for each folder
        // create a property for each file
        foreach (var file in files)
        {
            var (name, text) = file;
            var resources = JsonConvert.DeserializeObject<Resources>(text);
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine($"namespace OpenglTestConsole.Classes.Paths;");
            sb.AppendLine($"public static class ResourcePaths");
            sb.AppendLine($"{{");

            foreach (KeyValuePair<string, Dictionary<string, string>> folders in resources.resources)
            {
                sb.AppendLine($"    public static class {folders.Key}");
                sb.AppendLine($"    {{");
                foreach (KeyValuePair<string, string> items in folders.Value)
                {
                    sb.AppendLine($"        public static string {items.Key} = \"{items.Value}\";");
                }
                sb.AppendLine($"    }}");
            }
            sb.AppendLine($"}}");

            string output = sb.ToString();

            context.AddSource($"Resources.g.cs", SourceText.From(output, Encoding.UTF8));
        }

    }
}
