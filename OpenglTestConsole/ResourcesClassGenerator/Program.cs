using Newtonsoft.Json;
using System.Text;

namespace ResourcesClassGenerator
{
    internal class Program
    {
        private class Resources { public Dictionary<string, Dictionary<string, string>> resources { get; set; } = new Dictionary<string, Dictionary<string, string>>(); }
        static void Main(string[] args)
        {
            //System.Diagnostics.Debugger.Launch();

            string targetDirectory = args[1];

            string resourcesSourceFileLocation = args[0];

            string text = File.ReadAllText(resourcesSourceFileLocation);

            var resources = JsonConvert.DeserializeObject<Resources>(text);
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine($"namespace OpenglTestConsole.Classes.Paths;");
            sb.AppendLine($"public static class ResourcePaths");
            sb.AppendLine($"{{");

            foreach (KeyValuePair<string, Dictionary<string, string>> folders in resources.resources)
            {
                sb.AppendLine($"    public static class {folders.Key}");
                sb.AppendLine($"    {{");
                foreach (KeyValuePair<string, string> items in folders.Value)
                {
                    sb.AppendLine($"        public const string {items.Key} = \"{items.Value}\";");
                }
                sb.AppendLine($"    }}");
            }
            sb.AppendLine($"}}");

            string output = sb.ToString();

            File.Create(targetDirectory + "/ResourcePaths.g.cs").Close();
            File.WriteAllText(targetDirectory + "/ResourcePaths.g.cs", output);

        }
    }
}
