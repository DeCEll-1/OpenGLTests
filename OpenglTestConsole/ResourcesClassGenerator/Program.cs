using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.ComponentModel.Design.Serialization;
using System.Diagnostics;
using System.Text;

namespace ResourcesClassGenerator
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //System.Diagnostics.Debugger.Launch();
            string targetDirectory = args[1];

            string resourcesSourceFileLocation = args[0];

            string text = File.ReadAllText(resourcesSourceFileLocation);

            JObject root = JObject.Parse(text);

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine($"namespace OpenglTestConsole.Generated.Paths;");
            sb.AppendLine($"public static class ResourcePaths");
            sb.AppendLine($"{{");

            foreach (JProperty prop in root.Properties())
            {
                WriteClass(sb, prop.Name, (JObject)prop.Value, 1);
            }

            sb.AppendLine($"}}");

            string output = sb.ToString();

            File.Create(targetDirectory + "/ResourcePaths.g.cs").Close();
            File.WriteAllText(targetDirectory + "/ResourcePaths.g.cs", output);

        }

        static void WriteClass(StringBuilder sb, string className, JObject obj, int indentLevel)
        {
            string indent = new string(' ', indentLevel * 4);
            sb.AppendLine($"{indent}public static class {className}");
            sb.AppendLine($"{indent}{{");

            foreach (var prop in obj.Properties())
            {
                if (prop.Value.Type == JTokenType.Object)
                {
                    WriteClass(sb, prop.Name, (JObject)prop.Value, indentLevel + 1);
                }
                else if (prop.Value.Type == JTokenType.String)
                {
                    sb.AppendLine($"{indent}    public const string {prop.Name} = \"{prop.Value.ToString()}\";");
                }
                // Optionally handle arrays or other types if needed
            }

            sb.AppendLine($"{indent}}}");
        }
    }
}
